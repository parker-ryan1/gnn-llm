version: '3.8'

# Production-ready Docker Compose configuration
services:
  # PostgreSQL Database with production settings
  postgres:
    image: postgres:15
    container_name: graph_postgres_prod
    environment:
      POSTGRES_DB: graphdb
      POSTGRES_USER: graphuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U graphuser -d graphdb"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: graph_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # Ollama service with production settings
  ollama:
    image: ollama/ollama:latest
    container_name: graph_ollama_prod
    volumes:
      - ollama_data_prod:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=24h
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Load balancer/reverse proxy
  nginx:
    image: nginx:alpine
    container_name: graph_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - graph-gnn-api
    restart: always

  # Main API service with production settings
  graph-gnn-api:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: graph_gnn_api_prod
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://graphuser:${POSTGRES_PASSWORD}@postgres:5432/graphdb
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=mistral
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX_NAME=${PINECONE_INDEX_NAME}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    command: ["gunicorn", "api.fastapi_server:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000"]
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Background worker for heavy processing
  graph-gnn-worker:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: graph_gnn_worker_prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://graphuser:${POSTGRES_PASSWORD}@postgres:5432/graphdb
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX_NAME=${PINECONE_INDEX_NAME}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    command: ["python", "worker.py"]
    restart: always
    deploy:
      replicas: 2

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: graph_prometheus_prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: always

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: graph_grafana_prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: always

volumes:
  postgres_data_prod:
  redis_data_prod:
  ollama_data_prod:
  prometheus_data_prod:
  grafana_data_prod: